package spring.project.securitynico.configurations;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import spring.project.securitynico.security.UserSecurityConfig;@Configuration@EnableWebSecuritypublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserSecurityConfig userSecurityConfig;    @Override    protected void configure(AuthenticationManagerBuilder auth) {        auth.authenticationProvider(authenticationProvider());    }    @Override    protected void configure(HttpSecurity http) throws Exception {        http                .authorizeRequests()                .antMatchers("/index").permitAll()                .antMatchers("/profile/**").authenticated()                .antMatchers("/admin/**").hasRole("ADMIN")                .antMatchers("/management/**").hasAnyRole("ADMIN", "MANAGER")                .antMatchers("/api/**").authenticated()                .and()                .httpBasic();    }    @Bean    DaoAuthenticationProvider authenticationProvider() {        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();        provider.setPasswordEncoder(passwordEncoder());        provider.setUserDetailsService(this.userSecurityConfig);        return provider;    }    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }}